#pragma once

const std::unordered_map<Connection::DisconnectFailReason, std::string> DisconnectFailReasonToString = {
    { Connection::DisconnectFailReason::Unknown, "Unknown" },
    { Connection::DisconnectFailReason::CantConnectNoInternet, "Cant Connect No Internet" },
    { Connection::DisconnectFailReason::NoPermissions, "No Permissions" },
    { Connection::DisconnectFailReason::UnrecoverableError, "Unrecoverable Error" },
    { Connection::DisconnectFailReason::ThirdPartyBlocked, "Third Party Blocked" },
    { Connection::DisconnectFailReason::ThirdPartyNoInternet, "Third Party No Internet" },
    { Connection::DisconnectFailReason::ThirdPartyBadIP, "Third Party Bad IP" },
    { Connection::DisconnectFailReason::ThirdPartyNoServerOrServerLocked, "Third Party No Server Or Server Locked" },
    { Connection::DisconnectFailReason::VersionMismatch, "Version Mismatch" },
    { Connection::DisconnectFailReason::SkinIssue, "Skin Issue" },
    { Connection::DisconnectFailReason::InviteSessionNotFound, "Invite Session Not Found" },
    { Connection::DisconnectFailReason::EduLevelSettingsMissing, "Edu Level Settings Missing" },
    { Connection::DisconnectFailReason::LocalServerNotFound, "Local Server Not Found" },
    { Connection::DisconnectFailReason::LegacyDisconnect, "Legacy Disconnect" },
    { Connection::DisconnectFailReason::UserLeaveGameAttempted, "User Leave Game Attempted" },
    { Connection::DisconnectFailReason::PlatformLockedSkinsError, "Platform Locked Skins Error" },
    { Connection::DisconnectFailReason::RealmsWorldUnassigned, "Realms World Unassigned" },
    { Connection::DisconnectFailReason::RealmsServerCantConnect, "Realms Server Cant Connect" },
    { Connection::DisconnectFailReason::RealmsServerHidden, "Realms Server Hidden" },
    { Connection::DisconnectFailReason::RealmsServerDisabledBeta, "Realms Server Disabled Beta" },
    { Connection::DisconnectFailReason::RealmsServerDisabled, "Realms Server Disabled" },
    { Connection::DisconnectFailReason::CrossPlatformDisabled, "Cross Platform Disabled" },
    { Connection::DisconnectFailReason::CantConnect, "Cant Connect" },
    { Connection::DisconnectFailReason::SessionNotFound, "Session Not Found" },
    { Connection::DisconnectFailReason::ClientSettingsIncompatibleWithServer, "Client Settings Incompatible With Server" },
    { Connection::DisconnectFailReason::ServerFull, "Server Full" },
    { Connection::DisconnectFailReason::InvalidPlatformSkin, "Invalid Platform Skin" },
    { Connection::DisconnectFailReason::EditionVersionMismatch, "Edition Version Mismatch" },
    { Connection::DisconnectFailReason::EditionMismatch, "Edition Mismatch" },
    { Connection::DisconnectFailReason::LevelNewerThanExeVersion, "Level Newer Than Exe Version" },
    { Connection::DisconnectFailReason::NoFailOccurred, "No Fail Occurred" },
    { Connection::DisconnectFailReason::BannedSkin, "Banned Skin" },
    { Connection::DisconnectFailReason::Timeout, "Timeout" },
    { Connection::DisconnectFailReason::ServerNotFound, "Server Not Found" },
    { Connection::DisconnectFailReason::OutdatedServer, "Outdated Server" },
    { Connection::DisconnectFailReason::OutdatedClient, "Outdated Client" },
    { Connection::DisconnectFailReason::NoPremiumPlatform, "No Premium Platform" },
    { Connection::DisconnectFailReason::MultiplayerDisabled, "Multiplayer Disabled" },
    { Connection::DisconnectFailReason::NoWifi, "No Wifi" },
    { Connection::DisconnectFailReason::WorldCorruption, "World Corruption" },
    { Connection::DisconnectFailReason::NoReason, "No Reason" },
    { Connection::DisconnectFailReason::Disconnected, "Disconnected" },
    { Connection::DisconnectFailReason::InvalidPlayer, "Invalid Player" },
    { Connection::DisconnectFailReason::LoggedInOtherLocation, "Logged In Other Location" },
    { Connection::DisconnectFailReason::ServerIdConflict, "Server Id Conflict" },
    { Connection::DisconnectFailReason::NotAllowed, "Not Allowed" },
    { Connection::DisconnectFailReason::NotAuthenticated, "Not Authenticated" },
    { Connection::DisconnectFailReason::InvalidTenant, "Invalid Tenant" },
    { Connection::DisconnectFailReason::UnknownPacket, "Unknown Packet" },
    { Connection::DisconnectFailReason::UnexpectedPacket, "Unexpected Packet" },
    { Connection::DisconnectFailReason::InvalidCommandRequestPacket, "Invalid CommandRequestPacket" },
    { Connection::DisconnectFailReason::HostSuspended, "Host Suspended" },
    { Connection::DisconnectFailReason::LoginPacketNoRequest, "Login Packet No Request" },
    { Connection::DisconnectFailReason::LoginPacketNoCert, "Login Packet No Cert" },
    { Connection::DisconnectFailReason::MissingClient, "Missing Client" },
    { Connection::DisconnectFailReason::Kicked, "Kicked" },
    { Connection::DisconnectFailReason::KickedForExploit, "Kicked For Exploit" },
    { Connection::DisconnectFailReason::KickedForIdle, "Kicked For Idle" },
    { Connection::DisconnectFailReason::ResourcePackProblem, "Resource Pack Problem" },
    { Connection::DisconnectFailReason::IncompatiblePack, "Incompatible Pack" },
    { Connection::DisconnectFailReason::OutOfStorage, "Out Of Storage" },
    { Connection::DisconnectFailReason::InvalidLevel, "Invalid Level" },
    { Connection::DisconnectFailReason::DisconnectPacket_Deprecated, "DisconnectPacket Deprecated" },
    { Connection::DisconnectFailReason::BlockMismatch, "Block Mismatch" },
    { Connection::DisconnectFailReason::InvalidHeights, "Invalid Heights" },
    { Connection::DisconnectFailReason::InvalidWidths, "Invalid Widths" },
    { Connection::DisconnectFailReason::ConnectionLost, "Connection Lost" },
    { Connection::DisconnectFailReason::ZombieConnection, "Zombie Connection" },
    { Connection::DisconnectFailReason::Shutdown, "Shutdown" },
    { Connection::DisconnectFailReason::ReasonNotSet_Deprecated, "Reason Not Set Deprecated" },
    { Connection::DisconnectFailReason::LoadingStateTimeout, "Loading State Timeout" },
    { Connection::DisconnectFailReason::ResourcePackLoadingFailed, "Resource Pack Loading Failed" },
    { Connection::DisconnectFailReason::SearchingForSessionLoadingScreenFailed, "Searching For Session Loading Screen Failed" },
    { Connection::DisconnectFailReason::ConnProtocolVersion, "Conn Protocol Version" },
    { Connection::DisconnectFailReason::SubsystemStatusError, "Subsystem Status Error" },
    { Connection::DisconnectFailReason::EmptyAuthFromDiscovery, "Empty Auth From Discovery" },
    { Connection::DisconnectFailReason::EmptyUrlFromDiscovery, "Empty Url From Discovery" },
    { Connection::DisconnectFailReason::ExpiredAuthFromDiscovery, "Expired Auth From Discovery" },
    { Connection::DisconnectFailReason::UnknownSignalServiceSignInFailure, "Unknown Signal Service Sign In Failure" },
    { Connection::DisconnectFailReason::XblJoinLobbyFailure, "Xbl Join Lobby Failure" },
    { Connection::DisconnectFailReason::UnspecifiedClientInstanceDisconnection, "Unspecified ClientInstance Disconnection" },
    { Connection::DisconnectFailReason::ConnSessionNotFound, "Conn Session Not Found" },
    { Connection::DisconnectFailReason::ConnCreatePeerConnection, "Conn Create Peer Connection" },
    { Connection::DisconnectFailReason::ConnIce, "Conn Ice" },
    { Connection::DisconnectFailReason::ConnConnectRequest, "Conn Connect Request" },
    { Connection::DisconnectFailReason::ConnConnectResponse, "Conn Connect Response" },
    { Connection::DisconnectFailReason::ConnNegotiationTimeout, "Conn Negotiation Timeout" },
    { Connection::DisconnectFailReason::ConnInactivityTimeout, "Conn Inactivity Timeout" },
    { Connection::DisconnectFailReason::StaleConnectionBeingReplaced, "Stale Connection Being Replaced" },
    { Connection::DisconnectFailReason::RealmsSessionNotFound_Deprecated, "Realms Session Not Found" },
    { Connection::DisconnectFailReason::BadPacket, "Bad or Invalid Packet" },
    { Connection::DisconnectFailReason::NetherNetFailedToCreateOffer, "Nether Net Failed To Create Offer" },
    { Connection::DisconnectFailReason::NetherNetFailedToCreateAnswer, "Nether Net Failed To Create Answer" },
    { Connection::DisconnectFailReason::NetherNetFailedToSetLocalDescription, "Nether Net Failed To Set Local Description" },
    { Connection::DisconnectFailReason::NetherNetFailedToSetRemoteDescription, "Nether Net Failed To Set Remote Description" },
    { Connection::DisconnectFailReason::NetherNetNegotiationTimeoutWaitingForResponse, "Nether Net Negotiation Timeout Waiting For Response" },
    { Connection::DisconnectFailReason::NetherNetNegotiationTimeoutWaitingForAccept, "Nether Ne tNegotiation Timeout Waiting For Accept" },
    { Connection::DisconnectFailReason::NetherNetIncomingConnectionIgnored, "Nether Net Incoming Connection Ignored" },
    { Connection::DisconnectFailReason::NetherNetSignalingParsingFailure, "Nether Net Signaling Parsing Failure" },
    { Connection::DisconnectFailReason::NetherNetSignalingUnknownError, "Nether Net Signaling Unknown Error" },
    { Connection::DisconnectFailReason::NetherNetSignalingUnicastDeliveryFailed, "Nether Net Signaling Unicast Delivery Failed" },
    { Connection::DisconnectFailReason::NetherNetSignalingBroadcastDeliveryFailed, " Nether Net Signaling Broadcast Delivery Failed" },
    { Connection::DisconnectFailReason::NetherNetSignalingGenericDeliveryFailed, "Nether Net Signaling Generic Delivery Failed" },
    { Connection::DisconnectFailReason::EditorMismatchEditorWorld, "Editor Mismatch Editor World" },
    { Connection::DisconnectFailReason::EditorMismatchVanillaWorld, "Editor Mismatch Vanilla World" },
    { Connection::DisconnectFailReason::WorldTransferNotPrimaryClient, "World Transfer Not Primary Client" },
    { Connection::DisconnectFailReason::RequestServerShutdown, "Request Server Shutdown" },
    { Connection::DisconnectFailReason::ClientGameSetupCancelled, "Client Game Setup Cancelled" },
    { Connection::DisconnectFailReason::ClientGameSetupFailed, "Client Game Setup Failed" },
    { Connection::DisconnectFailReason::NoVenue, "No Venue" },
    { Connection::DisconnectFailReason::NetherNetSignalingSigninFailed, "Nether Net Signaling Signin Failed" },
    { Connection::DisconnectFailReason::SessionAccessDenied, "Session Access Denied" },
    { Connection::DisconnectFailReason::ServiceSigninIssue, "Service Signin Issue" },
    { Connection::DisconnectFailReason::NetherNetNoSignalingChannel, "Nether Net No Signaling Channel" },
    { Connection::DisconnectFailReason::NetherNetNotLoggedIn, "Nether Net Not Logged In" },
    { Connection::DisconnectFailReason::NetherNetClientSignalingError, "Nether Net Client Signaling Error" }
};

class DisconnectPacket : public Packet {
public:
    bool                             mSkipMessage;
    std::string                      mMessage;
    Connection::DisconnectFailReason mReason;

    // Function to get enum name from DisconnectFailReason
    std::string getDisconnectEnumName(Connection::DisconnectFailReason reason) {
        auto it = DisconnectFailReasonToString.find(reason);
        if (it != DisconnectFailReasonToString.end()) {
            return it->second;
        }
        else {
            return "Unretrivable";
        }
        //throw std::invalid_argument("Invalid DisconnectFailReason enum value");
    }
};