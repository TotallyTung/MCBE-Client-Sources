#include "ClientSpoof.h"
#include <stdlib.h> /* srand, rand */
#include "../../ModuleManager.h"
#include "../../Utils/Utils.h"

using namespace std;
ClientSpoof::ClientSpoof() : IModule(0x0, Category::EXPLOIT, "More chat options")
{
	//registerBoolSetting("Random String", &bypass, bypass);
	registerBoolSetting(">", &greenText, greenText);
	//registerBoolSetting("AutoEZ", &autoez, autoez);
	// registerBoolSetting("Death Analyze", &whyDead, whyDead, "Analyzes why you died, like Future Client!");
	//  TODO: AutoExcuse, use same logic as auto ez but for u instead
	//  registerBoolSetting("AutoExcuse", &autoexcuse, autoexcuse);
	registerEnumSetting("Clients", &mode, 1);
	mode.addEntry("PH", 1);
	mode.addEntry("CW", 2);
	mode.addEntry("S4", 3);
	mode.addEntry("HD", 4);
	mode.addEntry("SLD", 5);
	mode.addEntry("Nuke", 6);
	mode.addEntry("N+", 7);
	mode.addEntry("WI", 8);
	mode.addEntry("LOH", 9);
	mode.addEntry("TB", 10);
	mode.addEntry("RH", 11);
	mode.addEntry("GS", 12);
	mode.addEntry("JP", 13);
	mode.addEntry("PL", 14);
	mode.addEntry("AK", 15);
	mode.addEntry("ZD", 16);
	mode.addEntry("CH", 17);
	shouldHide = true;
}

const char* ClientSpoof::getModuleName()
{
	return ("ClientSpoof");
};
static std::vector<C_Entity*> targetList;



void ClientSpoof::onSendPacket(C_Packet* packet)
{

	if (packet->isInstanceOf<C_TextPacket>()) {
		C_TextPacket* textPacket = reinterpret_cast<C_TextPacket*>(packet);

		switch (mode.getSelectedValue()) {
		case 1:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Protohax");
			break;

		case 2:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | CuteWave");
			break;

		case 3:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | S4kuraUwU");
			break;

		case 4:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Hades+");
			break;  // <-- Missing break here

		case 5:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | SLD V2");
			break;

		case 6:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Nuke V6");
			break;

		case 7:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Project:N+");
			break;

		case 8:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Wi+");
			break;

		case 9:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Loholism");
			break;

		case 10:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | TOOLBOX");
			break;

		case 11:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | # RabbitHunter");
			break;

		case 12:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Gamesense v0.15.6");
			break;

		case 13:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string("| Nuke.jp");
			break;

		case 14:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Nuke.pl");
			break;

		case 15:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Alektor");
			break;

		case 16	:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Zodiac");
			break;

		case 17:
			textPacket->message = std::string("> ") + textPacket->message.getText() + std::string(" | Chronos");
			break;

		}

	}
}

		
		/*Sentence = funy->message.getText();
		if (bypass)
		{
			static const char alphanum[] =
				"0123456789"
				"ABCDEFGHIJKLMNOPQRSTUVWXYZ"
				"abcdefghijklmnopqrstuvwxyz";
			std::string tmp_s;
			tmp_s.reserve(6);

			for (int i = 0; i < 6; ++i)
			{
				tmp_s += alphanum[rand() % (sizeof(alphanum) - 1)];
			}
			tmp_s = " | " + tmp_s;

			Sentence += tmp_s;
		}
		if (greenText)
		{
			Sentence = "> " + Sentence;
		}
		funy->message.resetWithoutDelete();
		funy->message.setText(Sentence);
		}
	}
	*/