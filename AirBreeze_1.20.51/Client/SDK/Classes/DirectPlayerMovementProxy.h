#pragma once
#include "../../Utils/Utils.h"
class MobEffect;
class BlockLegacy;
class Block;
class BlockSource;

class DirectPlayerMovementProxy {
public:
	virtual void Destructor();
	virtual __int64 _getStateProvider(void);
	virtual __int64 _getStateProvider2(void);
	virtual bool isRiding(void);
	virtual bool hasPassenger(void);
	virtual bool isClientside(void);
	virtual bool isCreative(void);
	virtual bool isInWater(void);
	virtual bool isOverScaffolding(void);
	virtual bool isSwimming(void);
	virtual bool isImmersedInWater(void);
	virtual bool isHeadInWater(void);
	virtual bool isSwimmer(void);
	virtual bool isImmobile(void);
	virtual bool isKnockedBackOnDeath(void);
	virtual bool shouldBeImmobile(void);
	virtual bool isControlledByLocalInstance(void);
	virtual bool hasTeleported(void);
	virtual bool isWearingLeatherBoots(void);
	virtual bool hasFamily(void);//HashedString const&
	virtual bool isWorldBuilder(void);
	virtual bool isSleeping(void);
	virtual bool usesOneWayCollision(void);
	virtual bool isStuckInCollider(void);
	virtual void setStuckInCollider(bool);
	virtual bool isStuckItem(void);
	virtual std::vector<AABB, std::allocator<AABB>> getOnewayPhysicsBlocks(void);
	virtual bool wasPenetratingLastFrame(void);
	virtual void setWasPenetratingLastFrame(bool);
	virtual bool isPrimaryLocalPlayer(void);
	virtual std::vector<AABB, std::allocator<AABB>> getSubAABBs(void);
	virtual void setSubAABBs(std::vector<AABB, std::allocator<AABB>> const&);
	virtual AABB getLiquidAABB(int);
	virtual bool isStackable(void);
	virtual bool getCollidableActorNear(void);
	virtual void setCollidableActorNear(bool);
	virtual float getWalkDist(void);
	virtual void setWalkDist(float);
	virtual bool isFlying(void);
	virtual bool isOnGround(void);
	virtual void setOnGround(bool);
	virtual bool wasOnGround(void);
	virtual void setWasOnGround(bool);
	virtual int getHealth(void);
	virtual void setHorizontalCollision(bool);
	virtual bool getVerticalCollision(void);
	virtual void setVerticalCollision(bool);
	virtual bool getCollision(void);
	virtual void setCollision(bool);
	virtual float getMaxAutoStep(void);
	virtual float getHeightOffset(void);
	virtual void setTerrainSurfaceOffset(float);
	virtual float getCurrentSwimAmount(void);
	virtual __int64 getAttribute(void);//AttributeInstance getAttribute(Attribute const&);
	virtual bool hasEffect(MobEffect const&);
	virtual int getEffect(MobEffect const&);
	virtual int getActiveEffectCount(void);
	virtual __int64 _getEntityData(void);
	virtual void setStatusFlag(void);//ActorFlags, bool
	virtual int getStatusFlag(void);//ActorFlags
	virtual bool hasCategory(int);
	virtual bool isType(int);
	virtual int getEntityTypeId(void);
	virtual Vec3<float> getPos(void);
	virtual Vec3<float> getPosPrev(void);
	virtual void setPosDirect(Vec3<float> const&);
	virtual void setPos(Vec3<float> const&);
	virtual Vec3<float> getPosDelta(void);
	virtual Vec3<float> getPosDeltaNonConst(void);
	virtual void setAABB(AABB const&);
	virtual AABB getAABB(void);
	virtual Vec2<float> getAABBDim(void);
	virtual float getAttachPos(Vec3<float>, float);
	virtual Vec2<float> getRot(void);
	virtual void setRot(Vec2<float> const&);
	virtual Vec2<float> getRotPrev(void);
	virtual float getFallDistance(void);
	virtual void setFallDistance(float);
	virtual bool isSneaking(void);
	virtual void setSneaking(bool);
	virtual float getHeadLookVector(float);
	virtual int getDimensionBlockSource(void);
	virtual int getRegionFromDimension(void);
	virtual __int64 fetchCollisionShapes(AABB const&, float*, bool, DirectPlayerMovementProxy*);
	virtual __int64 fetchEntities(DirectPlayerMovementProxy const*, AABB const&);
	virtual bool hasDimension(void);
	virtual __int64 getVehicle(void);
	virtual bool isWASDControlled(void);
	virtual int getControllingSeat(void);
	virtual int getPassengerIndex(DirectPlayerMovementProxy const&);
	virtual __int64 tryAsBoat(void);
	virtual void tryAsMob(void);
	virtual void tryAsMob1(void);
	virtual void tryAsPlayer(void);
	virtual void tryAsPlayer1(void);
	virtual int64_t getUniqueID(void);
	virtual int64_t getRuntimeID(void);
	virtual Vec3<int> getBlockPosCurrentlyStandingOn(DirectPlayerMovementProxy*);
	virtual Vec3<int> getBlockPosCurrentlyStandingOn(DirectPlayerMovementProxy*, BlockSource const&);
	virtual void shouldTriggerOnStandOn(BlockLegacy const&, Vec3<int> const&);
	virtual void move(Vec3<float> const&);
	virtual void checkFallDamage(float, bool);
	virtual void onBounceStarted(Vec3<int> const&, Block const&);
	virtual void updatePrevPosRot(void);
	virtual void _teleportTo(Vec3<float> const&, bool, int, int);
	virtual void _getRawActor(void);
	virtual void _getRawActor2(void);
	virtual __int64 _getEntityData2(void);
	virtual void _setPreviousPosRot(void);
	virtual void _setHasTeleported(bool);
	virtual __int64 _getAttributes(void);
	virtual int _advanceLiveFrame(__int64 const&);
	virtual class Actor* getEntity(void);
	virtual class Actor* getEntity2(void);
	virtual int getNoJumpDelay(void);
	virtual void setNoJumpDelay(int);
	virtual bool isJumping(void);
	virtual void setJumping(bool);
	virtual Vec3<float> getJumpStartPos(void);
	virtual void setJumpStartPos(Vec3<float> const&);
	virtual float getJumpPower(void);
	virtual int getJumpTicks(void);
	virtual void setJumpTicks(int);
	virtual void _endJump(void);
	virtual void onPlayerJump(int);
	virtual float getSpeed(void);
	virtual void setSpeed(float);
	virtual bool isSprinting(void);
	virtual void setSprinting(bool);
};