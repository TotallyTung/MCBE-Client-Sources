#pragma once
#include "../../Utils/Utils.h"
#include "Actor.h"

class Level {
public:
	virtual ~Level();
	virtual void initialize();
	virtual void startLeaveGame(void);
	virtual bool isLeaveGameDone(void);
	virtual int getOrCreateDimension();
	virtual int getDimension();
	virtual int getLastOrDefaultSpawnDimensionId();
	virtual void forEachDimension(void);
	virtual void forEachDimension2(void);
	virtual int getDimensionManager(void);
	virtual int getDimensionManager2(void);
	virtual int getChunkTickRange(void);
	virtual int getChunkTickRangeManager(void);
	virtual int getPortalForcer(void);
	virtual void requestPlayerChangeDimension();
	virtual void entityChangeDimension();
	virtual int getSpawner(void);
	virtual int getBossEventSubscriptionManager(void);
	virtual int getProjectileFactory(void);
	virtual int getEntityDefinitions(void);
	virtual int getActorAnimationGroup(void);
	virtual int getActorAnimationControllerGroup(void);
	virtual int getBlockDefinitions(void);
	virtual int getBlockComponentFactory(void);
	virtual int getBlockComponentFactory4(void);
	virtual int getActorPropertyGroup(void);
	virtual int getCameraPresets(void);
	virtual int getCameraPresets2(void);
	virtual int getDisablePlayerInteractions(void);
	virtual void setDisablePlayerInteractions(bool);
	virtual int getAutomationBehaviorTreeGroup(void);
	virtual int getBehaviorFactory(void);
	virtual int getDifficulty(void);
	virtual int getInternalComponentRegistry(void);
	virtual int getDimensionConversionData(void);
	virtual int getSpecialMultiplier();
	virtual void hasCommandsEnabled(void);
	virtual void useMsaGamertagsOnly(void);
	virtual void setMsaGamertagsOnly(bool);
	virtual void addEntity();
	virtual void addGlobalEntity();
	virtual void addAutonomousEntity();
	virtual void addUser();
	virtual void addDisplayEntity();
	virtual void removeDisplayEntity();
	virtual void suspendPlayer(Actor&);
	virtual void resumePlayer(Actor&);
	virtual bool isPlayerSuspended(Actor&);
	virtual void removeActorAndTakeEntity();
	virtual void removeActorFromWorldAndTakeEntity();
	virtual void takeEntity();
	virtual void fetchEntity(unsigned int64_t, bool);
	virtual int getRuntimeEntity(__int64, bool);
	virtual int getMob(unsigned int64_t);
	virtual int getPlayer(std::string const&);
	virtual int getPlayer();
	virtual int getPlayerByXuid(std::string const&);
	virtual int getPlayer(unsigned int64_t);
	virtual int getPlatformPlayer(std::string const&);
	virtual int getPlayerFromServerId(std::string const&);
	virtual int getRuntimePlayer(__int64);
	virtual int getNumRemotePlayers(void);
	virtual int getPrimaryLocalPlayer(void);
	virtual int getEventing(void);
	virtual int getPlayerColor(Actor const&);
	virtual int getCurrentTick(void);
	virtual int getCurrentServerTick(void);
	virtual int getBiomeRegistry(void);
	virtual int getBiomeRegistry2(void);
	virtual int getBlockPalette(void);
	virtual int getBlockPalette2(void);
	virtual int getFeatureRegistry(void);
	virtual int getFeatureRegistry2(void);
	virtual int getFeatureTypeFactory(void);
	virtual int getFeatureTypeFactory2(void);
	virtual int getJigsawStructureRegistry(void);
	virtual int getJigsawStructureRegistry2(void);
	virtual int getStructureManager(void);
	virtual int getStructureManager2(void);
	virtual int getBiomeComponentFactory(void);
	virtual int getBiomeComponentFactory2(void);
	virtual int getSurfaceBuilderRegistry(void);
	virtual int getSurfaceBuilderRegistry2(void);
	virtual int getBiomeManager(void);
	virtual int getBiomeManager2(void);
	virtual int getDimensionFactory(void);
	virtual int getDimensionFactory2(void);
	virtual int getLightTextureImageBuilderFactory(void);
	virtual int getLightTextureImageBuilderFactory2(void);
	virtual int getWorldRegistriesProvider(void);
	virtual int getWorldRegistriesProvider2(void);
	virtual void addListener();
	virtual void removeListener();
	virtual void tickEntities(void);
	virtual void tickEntitySystems(void);
	virtual int getPauseManager(void);
	virtual int getPauseManager2(void);
	virtual void onPlayerDeath(Actor&, unsigned __int64 actorDamageSource);
	virtual void tick(void);
	virtual void directTickEntities(BlockSource&);
	virtual void animateTick(Actor&);
	virtual void explode(BlockSource&, Actor*, Vec3<float> const&, float, bool, bool, float, bool);
	virtual void explode();
	virtual void spawnParticleEffect(std::string const&, Vec3<float> const&);
	virtual void denyEffect(BlockSource&, Vec3<float> const&);
	virtual void potionSplash();
	virtual void extinguishFire();
	virtual void findPath(Actor&, int, int, int);
	virtual void findPath(Actor&, Actor&);
	virtual void updateSleepingPlayerList(void);
	virtual void setSleepStatus();
	virtual int getSleepStatus(void);
	virtual int getTime(void);
	virtual void setTime(int);
	virtual int getSeed(void);
	virtual int getSharedSpawnPos(void);
	virtual void setDefaultSpawn();
	virtual int getDefaultSpawn(void);
	virtual void setDefaultGameType();
	virtual int getDefaultGameType(void);
	virtual void setDifficulty();
	virtual void setMultiplayerGameIntent(bool);
	virtual int getMultiplayerGameIntent(void);
	virtual void setMultiplayerGame(bool);
	virtual bool isMultiplayerGame(void);
	virtual void setLANBroadcastIntent(bool);
	virtual int getLANBroadcastIntent(void);
	virtual void setLANBroadcast(bool);
	virtual int getLANBroadcast(void);
	virtual void setXBLBroadcastIntent();
	virtual int getXBLBroadcastIntent(void);
	virtual void hasXBLBroadcastIntent(void);
	virtual void setXBLBroadcastMode();
	virtual int getXBLBroadcastMode(void);
	virtual void hasXBLBroadcast(void);
	virtual void setPlatformBroadcastIntent();
	virtual int getPlatformBroadcastIntent(void);
	virtual void hasPlatformBroadcastIntent(void);
	virtual void setPlatformBroadcastMode();
	virtual int getPlatformBroadcastMode(void);
	virtual void hasPlatformBroadcast(void);
	virtual void setHasLockedBehaviorPack(bool);
	virtual void setHasLockedResourcePack(bool);
	virtual void setCommandsEnabled(bool);
	virtual void setWorldTemplateOptionsUnlocked(void);
	virtual void hasLevelStorage(void);
	virtual int getLevelStorage(void);
	virtual int getLevelStorage2(void);
	virtual int getLevelData(void);
	virtual int getLevelData2(void);
	virtual int getPhotoStorage(void);
	virtual void createPhotoStorage(void);
	virtual void setEducationLevelSettings();
	virtual int getEducationLevelSettings(void);
	virtual void save(void);
	virtual void saveLevelData(void);
	virtual void saveGameData(void);
	virtual void requestTimedStorageDeferment(void);
	virtual int getTickingAreasMgr(void);
	virtual int getTickingArea();
	virtual void addTickingAreaList();
	virtual void sendServerLegacyParticle();
	virtual void playSound(unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void playSound(unsigned __int64 LevelSoundEvent, Vec3<float> const&, float, float);
	virtual void playSound(std::string const&, Vec3<float> const&, float, float);
	virtual void playSound(class BlockSource*, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void playSound(__int64, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void playSynchronizedSound(BlockSource&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, Block const&, __int64 const&, bool, bool);
	virtual void playSynchronizedSound(BlockSource&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void playSynchronizedSound(__int64&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void registerEventCoordinators(void);
	virtual void setRemotePlayerEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getRemotePlayerEventCoordinator(void);
	virtual void setServerPlayerEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getServerPlayerEventCoordinator(void);
	virtual void setClientPlayerEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getClientPlayerEventCoordinator(void);
	virtual void setActorEventCoordinator();
	virtual int getActorEventCoordinator(void);
	virtual void setBlockEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getBlockEventCoordinator(void);
	virtual void setItemEventCoordinator();
	virtual int getItemEventCoordinator(void);
	virtual void setServerNetworkEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getServerNetworkEventCoordinator(void);
	virtual void setScriptingEventCoordinator(std::unique_ptr<__int64>&&);
	virtual int getScriptingEventCoordinator(void);
	virtual void setScriptDeferredEventCoordinator();
	virtual int getScriptDeferredEventCoordinator(void);
	virtual int getLevelEventCoordinator(void);
	virtual void handleLevelEvent(__int64, Vec3<float> const&, int);
	virtual void handleLevelEvent(__int64, __int64 const&);
	virtual void handleStopSoundEvent(std::string const&);
	virtual void handleStopAllSounds(void);
	virtual void broadcastLevelEvent(__int64, Vec3<float> const&, int, __int64 const*);
	virtual void broadcastLevelEvent(__int64, __int64 const&, __int64 const*);
	virtual void broadcastLocalEvent(BlockSource&, __int64, Vec3<float> const&, int);
	virtual void broadcastLocalEvent(BlockSource&, __int64, Vec3<float> const&, Block const&);
	virtual void broadcastSoundEvent(BlockSource&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, Block const&, __int64 const&, bool, bool);
	virtual void broadcastSoundEvent(BlockSource&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void broadcastSoundEvent(__int64&, unsigned __int64 LevelSoundEvent, Vec3<float> const&, int, __int64 const&, bool, bool);
	virtual void broadcastunsigned();
	virtual void addChunkViewTracker(std::weak_ptr<__int64>);
	virtual void onChunkReload(__int64 const&);
	virtual void onChunkReloaded(__int64&, __int64&);
	virtual int getActivePlayerCount(void);
	virtual int getActiveUsersCount(void);
	virtual void forEachPlayer1(std::function<bool(Actor&)>);
	virtual void forEachPlayer(std::function<bool(Actor const&)>); //we use this
	virtual void forEachUser();
	virtual void forEachUser2();
	virtual void findPlayer(std::function<bool(Actor const&)>);
	virtual void findPlayer2(std::function<bool(__int64 const&)>);
	virtual int getUserCount(void);
	virtual void countUsersWithMatchingNetworkId(__int64 const&);
	virtual int getUsers(void);
	virtual int getEntities(void);
	virtual void onSubChunkLoaded(__int64&, __int64&, short, bool);
	virtual void onChunkLoaded(__int64&, __int64&);
	virtual void onChunkDiscarded(__int64&);
	virtual int getLevelChunkMetaDataManager(void);
	virtual void queueEntityDestruction(__int64);
	virtual void removeEntity(Actor&);
	virtual void removeEntity(__int64);
	virtual void forceRemoveEntity(Actor&);
	virtual void forceRemoveEntityfromWorld(Actor&);
	virtual void forceFlushRemovedPlayers(void);
	virtual void loadFunctionManager(void);
	virtual void levelCleanupQueueEntityRemoval(__int64);
	virtual void registerTemporaryPointer(__int64&);
	virtual void unregisterTemporaryPointer(__int64&);
	virtual void destroyBlock(BlockSource&, __int64 const&, bool);
	virtual void upgradeStorageVersion(__int64);
	virtual void suspendAndSave(void);
	virtual void addParticle(__int64, Vec3<float> const&, Vec3<float> const&, int, __int64 const*, bool);
	virtual void _destroyEffect(__int64 const&, Block const&, int);
	virtual void addParticleEffect(__int64 const&, Vec3<float> const&, __int64 const&);
	virtual void addTerrainParticleEffect(__int64 const&, Block const&, Vec3<float> const&, float, float, float);
	virtual void addTerrainSlideEffect(__int64 const&, Block const&, Vec3<float> const&, float, float, float);
	virtual void addBreakingItemParticleEffect(Vec3<float> const&, __int64, __int64 const&);
	virtual int getNewUniqueID(void);
	virtual int getNextRuntimeID(void);
	virtual int getTickingOffsets(void);
	virtual int getClientTickingOffsets(void);
	virtual bool isExporting(void);
	virtual void setIsExporting(bool);
	virtual int getSavedData(void);
	virtual int getMapSavedData(unsigned int64_t);
	virtual int getMapSavedData(__int64 const&);
	virtual int getMapSavedData(__int64 const*);
	virtual void requestMapInfo(unsigned int64_t, bool);
	virtual void expandMapByID(unsigned int64_t, bool);
	virtual void copyAndLockMap(unsigned int64_t);
	virtual void createMapSavedData();
	virtual void createMapSavedData(std::vector<__int64> const&, __int64 const&, __int64, int);
	virtual int getScreenshotsFolder(void);
	virtual int getLevelId(void);
	virtual void setLevelId(std::string);
	virtual int getSyncTasksGroup(void);
	virtual int getIOTasksGroup(void);
	virtual int getClientResourcePackManager(void);
	virtual int getServerResourcePackManager(void);
	virtual int getTradeTables(void);
	virtual void decrementTagCache(std::string const&, __int64, __int64&);
	virtual void incrementTagCache(std::string const&, __int64, __int64&);
	virtual bool isEdu(void);
	virtual int getActorFactory(void);
	virtual int getActorFactory2(void);
	virtual int getActorInfoRegistry(void);
	virtual int getEntityRegistry(void);
	virtual int getEntityRegistry2(void);
	virtual int getEntitySystems(void);
	virtual int getLevelEntity(void);
	virtual void _clientHandleAddOwnedEntity(__int64);
	virtual void _clientHandleAddWeakRefEntity(__int64, __int64);
	virtual void _clientHandleRemoveOwnedEntity(__int64);
	virtual void _clientHandleRemoveWeakRefEntity(__int64);
	virtual void runCommand(__int64 const&, __int64&, __int64, __int64);
	virtual void runCommand(__int64&, __int64&, __int64);
	virtual int getCapabilities(void);
	virtual int getTagRegistry(void);
	virtual int getPlayerMovementSettings(void);
	virtual void setPlayerMovementSettings(__int64 const&);
	virtual void canUseSkin(__int64 const&, __int64 const&, __int64 const&, __int64 const&);
	virtual int getPositionTrackerDBClient(void);
	virtual int getPositionTrackerDBServer(void);
	virtual void flushRunTimeLighting(void);
	virtual void loadBlockDefinitionGroup(__int64 const&);
	virtual void initializeBlockDefinitionGroup(void);
	virtual int getUnknownBlockTypeRegistry(void);
private:
	virtual void Function291();
public:
	virtual bool isClientSide(void);
	virtual int getPlayerList(void);
	virtual int getPlayerList2(void);
	virtual int getPlayerXUID(__int64 const&);
	virtual int getPlayerPlatformOnlineId(__int64 const&);
	virtual int getActiveUsers(void);
	virtual class std::vector<class Actor*> getRuntimeActorList(void);
	virtual void notifySubChunkRequestManager(__int64 const&);
	virtual int getSubChunkRequestManager(void);
	virtual int getPacketSender(void);
	virtual void setPacketSender(__int64*);
	virtual int getNetEventCallback(void);
	virtual void setNetEventCallback(__int64);
	virtual int getRandom(void);
	virtual int getThreadRandom(void);
	virtual int getHitResult(void);
	virtual int getLiquidHitResult(void);
	virtual int getImmersiveReaderString(void);
	virtual void setImmersiveReaderString(std::string);
	virtual int getAdventureSettings(void);
	virtual int getAdventureSettings2(void);
	virtual int getGameRules(void);
	virtual int getGameRules2(void);
	virtual void hasStartWithMapEnabled(void);
	virtual bool isEditorWorld(void);
	virtual int getDefaultAbilities(void);
	virtual int getDefaultPermissions(void);
	virtual int getDefaultPermissions2(void);
	virtual int getTearingDown(void);
	virtual void takePicture();
	virtual int getSoundPlayer(void);
	virtual void setSimPaused(bool);
	virtual int getSimPaused(void);
	virtual void setFinishedInitializing(void);
	virtual int getLootTables(void);
	virtual void updateWeather(float, int, float, int);
	virtual int getNetherScale(void);
	virtual int getScoreboard(void);
	virtual int getScoreboard2(void);
	virtual int getPlayerAbilities();
	virtual void setPlayerAbilities();
	virtual void sendAllPlayerAbilities(Actor const&);
	virtual void incrementSpawnableTickedMob(void);
	virtual int getSpawnableTickedMobCountPrevious(void);
	virtual int getRecipes(void);
	virtual int getBlockReducer(void);
	virtual int getTrimPatternRegistry(void);
	virtual int getTrimPatternRegistry2(void);
	virtual int getTrimMaterialRegistry(void);
	virtual int getTrimMaterialRegistry2(void);
	virtual void digestServerItemComponents();
	virtual int getRegisteredBorderBlock(void);
	virtual void use3DBiomeMaps(void);
	virtual void addBlockSourceForValidityTracking(BlockSource*);
	virtual void removeBlockSourceFromValidityTracking(BlockSource*);
	virtual void asLevel(void);
	virtual void asMultiPlayerLevel(void);
	virtual bool isClientSideGenerationEnabled(void);
	virtual void blockNetworkIdsAreHashes(void);
	virtual int getItemRegistry(void);
	virtual int getBlockRegistry(void);
	virtual void pauseAndFlushTaskGroups(void);
	virtual void _onPlayerDimensionChange(void);
	virtual void _getPlayerDeathManager(void);
	virtual int getArmorTrimUnloader(void);
private:
	virtual void Function357();
	virtual void Function358();
public:
	virtual void onSourceCreated(BlockSource&);
	virtual void onSourceDestroyed(BlockSource&);
	virtual void _subTick(void);
	virtual void _localPlayerChangedDimension(void);


};
