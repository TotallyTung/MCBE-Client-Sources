#include "AutoKit.h"

using namespace std;

AutoKit::AutoKit() : IModule(0, Category::EXPLOIT, "Automatically rekits everytime, use .kitname to edit the name of the kit")
{
	registerEnumSetting("Server", &server, 0);
	server.addEntry("IGNPvP", 0);
	registerIntSetting("Cooldown", &kitDelay, kitDelay, 0, 30, "Interval of each command, in seconds");
	registerBoolSetting("Reset when Hit", &resetOnHit, resetOnHit, "Cooldown resets when you get hit");
	registerBoolSetting("Dimensions", &dimension, dimension, "Calls a different kit for each dimension, use .knether to edit the name of the nether kit");
}
AutoKit::~AutoKit()
{
}

const char* AutoKit::getRawModuleName()
{
	return "AutoKit";
}
const char* AutoKit::getModName()
{
	switch (server.getSelectedValue()) {
	case 0:
		name = " IGNPvP";
		break;
	}
	return name;
}
void AutoKit::onTick(C_GameMode* gm) {
	auto player = g_Data.getLocalPlayer();
	CommandRequestPacket commandPacket;
	int dimension = 0;
	player->getDimensionId(&dimension);
	increasingDelay++;
	if (increasingDelay >= kitDelay * 20) {
		if (dimension) {
			if (dimension == 0) {
				commandPacket.payload.setText("/kit " + kitOverworld);
				g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&commandPacket);
			}
			else if (dimension == 1) {
				commandPacket.payload.setText("/kit " + kitNether);
				g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&commandPacket);
			}
		}
		else {
			commandPacket.payload.setText("/kit " + kitOverworld);
			g_Data.getClientInstance()->loopbackPacketSender->sendToServer(&commandPacket);
		}
		increasingDelay = 0;
	}
}