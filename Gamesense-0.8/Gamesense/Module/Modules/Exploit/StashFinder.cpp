#include "StashFinder.h"

StashFinder::StashFinder() : IModule(0, Category::EXPLOIT, "Automatically tells in chat when theres a possible stash nearby")
{
	mode.addEntry(EnumEntry("Chat", 0));
	registerEnumSetting("Mode", &mode, 0);
}

StashFinder::~StashFinder()
{
}

const char *StashFinder::getRawModuleName()
{
	return ("StashFinder");
}

std::vector<vec3_t> chestList;
std::vector<std::string> playerList;

void StashFinder::onTick(C_GameMode *gm)
{
	std::vector<vec3_t> newChestList;
	if (!chestList.empty())
	{
		chestList.clear();
		for (auto i : chestList)
		{
			auto block = g_Data.getLocalPlayer()->region->getBlock(i);
			if (block->data)
				newChestList.push_back(i);
		}
		chestList = newChestList;
	}
}

void StashFinder::chestNotify(C_ChestBlockActor *chest)
{
	std::string type = "";
	auto storageID = g_Data.getLocalPlayer()->region->getBlock(chest->getFullAABB().upper)->blockLegacy->blockId;
	vec3_t blockPos = chest->getFullAABB().lower;
	if (blockPos.x < 0)
		blockPos.x -= 1;
	if (blockPos.z < 0)
		blockPos.z -= 1;
	for (auto i : chestList)
		if (i == blockPos)
			return;
	storageID = g_Data.getLocalPlayer()->region->getBlock(blockPos)->toLegacy()->blockId;
	switch (storageID)
	{
	case 54:
		type = "Chest";
		break;
	case 146:
		type = "Trapped Chest";
		break;
	case 130:
		type = "Ender Chest";
		break;
	case 458:
		type = "Barrel";
		break;
	case 205:
		type = "Shulker Box";
		break;
	case 218:
		type = "Shulker Box";
		break;
	}
	if (type != "")
		g_Data.getGuiData()->displayClientMessageF("[%s%sGame%ssense%s%s] found a %s at %s, %s, %s", BOLD, WHITE, GREEN, RESET, WHITE, type.c_str(), std::to_string((int)blockPos.x), std::to_string((int)blockPos.y), std::to_string((int)blockPos.z));
	chestList.push_back(blockPos);
}

void StashFinder::onEnable()
{
	chestList.clear();
	playerList.clear();
}

void StashFinder::onDisable()
{
	chestList.clear();
	playerList.clear();
}