#include "../../ModuleManager.h"
#include "AutoDupe.h"

bool place = true;
bool autoSwitch = true;
using namespace std;
AutoDupe::AutoDupe() : IModule(0, Category::PLAYER, "Automatically dupes for 2b2tMCPE")
{
	registerIntSetting("Closing Delay", &setDelay, setDelay, 0, 40);
	registerIntSetting("Range", &range, range, 1, 10);
	registerBoolSetting("Auto Place", &place, place);
	registerBoolSetting("Auto Switch", &autoSwitch, autoSwitch);
}

AutoDupe::~AutoDupe()
{
}

const char *AutoDupe::getRawModuleName()
{
	return ("AutoDupe");
}

vec3_ti searchRail(C_GameMode *gm)
{
	vec3_t *pos = gm->player->getPos();
	for (int x = (int)pos->x - 5; x < pos->x + 5; x++)
	{
		for (int z = (int)pos->z - 5; z < pos->z + 5; z++)
		{
			for (int y = (int)pos->y - 5; y < pos->y + 5; y++)
			{
				vec3_ti pos = vec3_ti(x, y, z);
				C_Block *block = gm->player->region->getBlock(pos);
				if (block != nullptr && g_Data.canUseMoveKeys())
				{
					auto id = gm->player->region->getBlock(pos)->toLegacy()->blockId;
					if (id == 66)
						return pos;
				}
			}
		}
	}
	return NULL;
}

void placeMinecart(C_GameMode *gm, vec3_ti pos)
{
	__int64 id = *g_Data.getLocalPlayer()->getUniqueId();
	C_PlayerInventoryProxy *supplies = g_Data.getLocalPlayer()->getSupplies();
	C_Inventory *inv = supplies->inventory;
	int currentSlot = supplies->selectedHotbarSlot;
	C_ItemStack *currentItem = inv->getItemStack(currentSlot);
	if (currentItem->item != nullptr && currentItem->getItem()->itemId == 389)
	{
		gm->buildBlock(&pos, 0);
	}
	else if (autoSwitch)
	{
		for (int n = 0; n < 9; n++)
		{
			C_ItemStack *stack = inv->getItemStack(n);
			if (stack->item != nullptr)
			{
				float currentDamage = stack->getAttackingDamageWithEnchants();
				if (stack->getItem()->itemId == 389)
				{
					supplies->selectedHotbarSlot = n;
					return;
				}
			}
		}
	}
}

void AutoDupe::chestScreenController_tick(C_ChestScreenController *c)
{
	if (c != nullptr && !g_Data.getLocalPlayer()->canOpenContainerScreen())
	{
		vector<int> items = {};
		for (int i = 0; i < 54; i++)
		{
			C_ItemStack *stack = c->_getItemStack(TextHolder("inventory_items"), i);
			if (stack != nullptr && stack->item != NULL)
				if (stack->getItem()->itemId == 218 || stack->getItem()->itemId == 205)
					items.push_back(i);
		}
		if (!items.empty())
		{
			for (int i : items)
			{
				c->handleAutoPlace(0x7FFFFFFF, "inventory_items", i);
			}
		}
		else
		{
			delay++;
			if (delay > setDelay)
			{
				c->tryExit();
				delay = 0;
			}
		}
	}
}

void onTick(C_GameMode *gm)
{
	bool minecart = false;
	if (!g_Data.canUseMoveKeys())
		return;
	g_Data.forEachEntity([&](C_Entity *ent, bool isNormal)
						 {
			if (ent->getEntityTypeId() == 524386) {
				minecart = true;
			} });
	vec3_ti pos = searchRail(gm);
	if (pos == NULL)
		return;
	if (!minecart && place)
		placeMinecart(gm, pos);
}