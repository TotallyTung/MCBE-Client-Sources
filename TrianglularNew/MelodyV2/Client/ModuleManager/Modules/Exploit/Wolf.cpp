#include "Wolf.h"
#include <cmath> // for std::atan2()
#include "../Exploit/AntiDesync.h"
#include "../../../Client.h"
int invalidslot = 0;
Woof::Woof() : Module("Woof", "Auto attack players / mobs arround u.", Category::COMBAT) {
	slider<int>("invalidslot", "NULL", ValueType::INT_T, &invalidslot, 0, 31);
}
int Woof::getBestWeaponSlot() {
	auto localPlayer = mc.getLocalPlayer();
	if (!localPlayer)
		return -1;

	auto plrInv = localPlayer->getPlayerInventory();
	if (!plrInv)
		return -1;

	auto inv = plrInv->inventory;
	if (!inv)
		return -1;

	float damage = 0.f;
	int slot = plrInv->selectedSlot;

	for (int i = 0; i < 9; i++) {
		auto itemStack = inv->getItemStack(i);
		if (itemStack && itemStack->isValid()) { // or you can do itemStack->getItemPtr()->hasRecipeTag("minecraft:is_sword") for sword find only 
			/*
			* here some step that you can get pick and things
			* item->getItemPtr()->hasRecipeTag("minecraft:digger") <- this is how you get like a things that can digs like shovel and picks and axe maybe
			* if (item->hasRecipeTag("minecraft:is_sword"))
			* item->hasRecipeTag("minecraft:is_pickaxe") <- get pickaxe
			* item->hasRecipeTag("minecraft:is_axe") <- get axe
			* item->hasRecipeTag("minecraft:is_shovel") <- get some shovel
			* item->hasRecipeTag("minecraft:is_hoe")<- get hoe like a riel bitch
			* item->hasRecipeTag("minecraft:is_food") <- get food
			*/
			float currentDamage = itemStack->getItemPtr()->getAttackDamage() + (1.25f * itemStack->getEnchantLevel(EnchantID::sharpness));
			if (currentDamage > damage) {
				damage = currentDamage;
				slot = i;
			}
		}
	}
	return slot;
}
void Woof::onNormalTick(Actor* actor) {
	//this is not finished
	auto localPlayer = mc.getLocalPlayer();
	auto plrInv = localPlayer->getPlayerInventory();
	auto inv = plrInv->inventory;
	auto gm = mc.getGameMode();
	auto region = localPlayer->dimension->blockSource;
	auto level = localPlayer->getLevel();
	plrInv->selectedSlot = invalidslot;
}

void Woof::onSendPacket(Packet* packet, bool& shouldCancel) {
}

void Woof::onImGuiRender(ImDrawList* d) {

}